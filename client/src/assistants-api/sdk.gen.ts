// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-axios';
import type { GetAssistantsData, GetAssistantsError, GetAssistantsResponse2, CreateAssistantData, CreateAssistantError, CreateAssistantResponse, DeleteAssistantData, DeleteAssistantError, DeleteAssistantResponse, GetDummyAssistantsError, GetDummyAssistantsResponse, ZimSegmentationData, ZimSegmentationError, ZimSegmentationResponse, Sam2SegmentationData, Sam2SegmentationError, Sam2SegmentationResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get Assistants
 * Get all models that match the given criteria.
 */
export const getAssistants = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetAssistantsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssistantsResponse2, GetAssistantsError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

/**
 * Create Assistant
 * Create a new model with the given parameters.
 */
export const createAssistant = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateAssistantData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAssistantResponse, CreateAssistantError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/'
    });
};

/**
 * Delete Assistant
 * Delete a model with the given name and type.
 */
export const deleteAssistant = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAssistantData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAssistantResponse, DeleteAssistantError, ThrowOnError>({
        ...options,
        url: '/{assistant_id}'
    });
};

/**
 * Get Dummy Assistants
 * Get all dummy models.
 */
export const getDummyAssistants = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDummyAssistantsResponse, GetDummyAssistantsError, ThrowOnError>({
        ...options,
        url: '/dummies'
    });
};

/**
 * Zim Segmentation
 * Perform segmentation with a ZIM model.
 */
export const zimSegmentation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ZimSegmentationData, ThrowOnError>) => {
    return (options?.client ?? client).post<ZimSegmentationResponse, ZimSegmentationError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/zim'
    });
};

/**
 * Sam2 Segmentation
 * Perform segmentation with a SAM2 model.
 */
export const sam2Segmentation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<Sam2SegmentationData, ThrowOnError>) => {
    return (options?.client ?? client).post<Sam2SegmentationResponse, Sam2SegmentationError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/sam2'
    });
};